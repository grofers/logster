{"version":3,"sources":["../src/Timer.js"],"names":["Timer","cb","ms","args","ref","setTimeout","undefined","clearTimeout"],"mappings":";;;;;;;;;;IAAMA,K;AACF,mBAAYC,EAAZ,EAAgBC,EAAhB,EAAoB;AAAA;;AAChB,aAAKD,EAAL,GAAUA,EAAV;AACA,aAAKC,EAAL,GAAUA,EAAV;AACH;AACD;;;;;;;;gCAIe;AAAA;;AAAA,8CAANC,IAAM;AAANA,oBAAM;AAAA;;AACX,gBAAI,CAAC,KAAKC,GAAV,EAAe;AACX,qBAAKA,GAAL,GAAWC,WAAW,YAAM;AACxB,0BAAKJ,EAAL,cAAWE,IAAX;AACA,0BAAKC,GAAL,GAAWE,SAAX;AACH,iBAHU,EAGR,KAAKJ,EAHG,CAAX;AAIH;AACJ;;;+BACM;AACH,gBAAI,KAAKE,GAAT,EAAcG,aAAa,KAAKH,GAAlB;AACd,iBAAKA,GAAL,GAAWE,SAAX;AACH;;;;;;kBAGUN,K","file":"Timer.js","sourcesContent":["class Timer {\n    constructor(cb, ms) {\n        this.cb = cb;\n        this.ms = ms;\n    }\n    /**\n     * once started it will not start new unless previous is canceled or finished\n     * @param {*} args\n     */\n    start(...args) {\n        if (!this.ref) {\n            this.ref = setTimeout(() => {\n                this.cb(...args);\n                this.ref = undefined;\n            }, this.ms);\n        }\n    }\n    stop() {\n        if (this.ref) clearTimeout(this.ref);\n        this.ref = undefined;\n    }\n}\n\nexport default Timer;\n"]}