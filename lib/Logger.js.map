{"version":3,"sources":["../src/Logger.js"],"names":["Logger","url","maxBufferLength","automaticFlush","overwriteBuffer","fetchConfig","sessionIdRequired","__send__","fireOnGlobalErrors","interval","Error","extraParams","flush","bind","buffer","hooks","timer","registerErrorHandler","action","state","level","extra","isFull","shift","push","timestamp","Date","now","window","addEventListener","_bufferUp","start","id","sessionId","undefined","key","value","message","method","body","JSON","stringify","headers","hook","forEach","getBuffer","logs","length","Promise","resolve","config","getFetchConfig","runHooks","report"],"mappings":"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","file":"Logger.js","sourcesContent":["import fetch from 'isomorphic-fetch';\n\nimport Buffer from './Buffer';\nimport Timer from './Timer';\n\n\nclass Logger {\n    constructor({\n        url,\n        maxBufferLength = 100,\n        automaticFlush = true,\n        overwriteBuffer = true,\n        fetchConfig = {},\n        sessionIdRequired = true,\n        __send__,\n        fireOnGlobalErrors = true,\n        interval, // if interval is not set (  ), timer will not start\n    }) {\n        if (!(this instanceof Logger)) { return new Logger({}); }\n        if (typeof url === 'undefined' && typeof __send__ === 'undefined') {\n            throw new Error('either set url or __send__');\n        }\n\n        this.maxBufferLength = maxBufferLength;\n        this.automaticFlush = automaticFlush;\n        this.overwriteBuffer = overwriteBuffer;\n        this.interval = interval;\n        this.fetchConfig = fetchConfig;\n        this.url = url;\n        this.sessionIdRequired = sessionIdRequired;\n        this.extraParams = {};\n        this.flush = this.flush.bind(this);\n\n        // eslint-disable-next-line no-buffer-constructor\n        this.buffer = new Buffer(maxBufferLength);\n        this.hooks = [];\n        this.timer = new Timer(this.flush, interval);\n\n        if (fireOnGlobalErrors) this.registerErrorHandler();\n        if (__send__ && typeof __send__ === 'function') this.__send__ = __send__;\n    }\n\n    _bufferUp(action, state, level, extra) {\n        const {\n            buffer,\n            overwriteBuffer,\n        } = this;\n\n        if (buffer.isFull()) {\n            // if overwriteBuffer set to false, silently drop all new logs\n            if (overwriteBuffer) buffer.shift();\n        }\n\n        if (action) {\n            buffer.push({\n                timestamp: Date.now(),\n                state,\n                extra,\n                level,\n                action,\n            });\n        }\n    }\n\n    registerErrorHandler() {\n        if (typeof window !== 'undefined') {\n            window.addEventListener('error', () => {\n                this.flush();\n            });\n        }\n    }\n\n    report(level, action, state) {\n        const {\n            automaticFlush,\n            interval,\n            buffer,\n            extraParams,\n        } = this;\n        this._bufferUp(action, state, level, extraParams);\n        if (automaticFlush) {\n            if (buffer.isFull()) {\n                this.flush();\n            } else if (interval) {\n                this.timer.start();\n            }\n        }\n    }\n\n    setSessionId(id) {\n        this.sessionId = id;\n        return this;\n    }\n\n    unsetSessionId() {\n        this.sessionId = undefined;\n    }\n\n    setExtraParams(key, value) {\n        if (!key) throw new Error('Key is undefined');\n        this.extraParams[key] = value;\n    }\n\n    getFetchConfig(message) {\n        return {\n            method: 'POST',\n            body: JSON.stringify({\n                message,\n                sessionId: this.sessionId,\n            }),\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            ...this.fetchConfig,\n        };\n    }\n    // these will be called before sending logs\n    addHook(hook) {\n        if (typeof hook !== 'function') throw new Error('Invalid Hook');\n        this.hooks.push(hook);\n        return this;\n    }\n\n    runHooks() {\n        this.hooks.forEach(hook => hook(this.buffer.getBuffer(), this.sessionId));\n    }\n\n    flush() {\n        if (!this.sessionIdRequired || this.sessionId) {\n            const logs = this.buffer.getBuffer();\n            if (logs.length === 0) return Promise.resolve('No logs to send');\n            const config = this.getFetchConfig(logs);\n            this.runHooks();\n            this.buffer.flush();\n            if (this.__send__) return Promise.resolve(this.__send__(logs, this.sessionId));\n            return fetch(this.url, config);\n        }\n        return Promise.resolve('Required sessionId not set');\n    }\n\n    info(action, state) { this.report('info', action, state); }\n    warn(action, state) { this.report('warn', action, state); }\n    error(action, state) { this.report('error', action, state); }\n    debug(action, state) { this.report('debug', action, state); }\n    emerg(action, state) { this.report('emerg', action, state); }\n}\n\nexport default Logger;\n"]}