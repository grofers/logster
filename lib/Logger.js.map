{"version":3,"sources":["../src/Logger.js"],"names":["Logger","url","maxBufferLength","automaticFlush","overwriteBuffer","fetchConfig","sessionIdRequired","__send__","fireOnGlobalErrors","interval","Error","actionFilter","f","stateFilter","extraParams","flush","bind","buffer","hooks","timer","registerErrorHandler","action","state","level","extra","isFull","shift","filteredAction","filteredState","push","timestamp","Date","now","window","addEventListener","_bufferUp","start","id","sessionId","undefined","key","value","message","method","body","JSON","stringify","headers","hook","forEach","getBuffer","logs","length","Promise","resolve","config","getFetchConfig","runHooks"],"mappings":"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","file":"Logger.js","sourcesContent":["import fetch from 'isomorphic-fetch';\n\nimport Buffer from './Buffer';\nimport Timer from './Timer';\n\n\nclass Logger {\n    constructor({\n        url,\n        maxBufferLength = 100,\n        automaticFlush = true,\n        overwriteBuffer = true,\n        fetchConfig = {},\n        sessionIdRequired = true,\n        __send__,\n        fireOnGlobalErrors = true,\n        interval, // if interval is not set (  ), timer will not start\n    }) {\n        if (!(this instanceof Logger)) { return new Logger(); }\n        if (typeof url === 'undefined' && typeof __send__ === 'undefined') {\n            throw new Error('either set url or __send__');\n        }\n\n        this.maxBufferLength = maxBufferLength;\n        this.actionFilter = f => f;\n        this.automaticFlush = automaticFlush;\n        this.stateFilter = () => ({});\n        this.overwriteBuffer = overwriteBuffer;\n        this.interval = interval;\n        this.fetchConfig = fetchConfig;\n        this.url = url;\n        this.sessionIdRequired = sessionIdRequired;\n        this.extraParams = {};\n        this.flush = this.flush.bind(this);\n\n        // eslint-disable-next-line no-buffer-constructor\n        this.buffer = new Buffer(maxBufferLength);\n        this.hooks = [];\n        this.timer = new Timer(this.flush, interval);\n\n        if (fireOnGlobalErrors) this.registerErrorHandler();\n        if (__send__ && typeof __send__ === 'function') this.__send__ = __send__;\n    }\n\n    _bufferUp(action, state, level, extra) {\n        const {\n            buffer,\n            actionFilter,\n            stateFilter,\n            overwriteBuffer,\n        } = this;\n        if (buffer.isFull()) {\n            // if overwriteBuffer set to false, silently drop all new logs\n            if (overwriteBuffer) buffer.shift();\n        }\n        const filteredAction = actionFilter(action);\n        const filteredState = stateFilter(state);\n        // if filteredAction doesn't return an object type then silently skilp that action\n        if (filteredAction && typeof filteredAction === 'object') {\n            buffer.push({\n                timestamp: Date.now(),\n                state: filteredState,\n                extra,\n                level,\n                action: filteredAction,\n            });\n        }\n    }\n\n    registerErrorHandler() {\n        if (typeof window !== 'undefined') {\n            window.addEventListener('error', () => {\n                this.flush();\n            });\n        }\n    }\n\n    report(level, action, state) {\n        const {\n            automaticFlush,\n            interval,\n            buffer,\n            extraParams,\n        } = this;\n        this._bufferUp(action, state, level, extraParams);\n        if (automaticFlush) {\n            if (buffer.isFull()) {\n                this.flush();\n            } else if (interval) {\n                this.timer.start();\n            }\n        }\n    }\n\n    setSessionId(id) {\n        this.sessionId = id;\n        return this;\n    }\n    unsetSessionId() {\n        this.sessionId = undefined;\n    }\n    setActionFilter(actionFilter) {\n        if (typeof actionFilter === 'function') {\n            this.actionFilter = actionFilter;\n        } else throw new Error('actionFilter must be a function');\n    }\n    setStateFilter(stateFilter) {\n        if (typeof stateFilter === 'function') {\n            this.stateFilter = stateFilter;\n        } else throw new Error('actionFilter must be a function');\n    }\n    setExtraParams(key, value) {\n        if (!key) throw new Error('Key is undefined');\n        this.extraParams[key] = value;\n    }\n\n    getFetchConfig(message) {\n        return {\n            method: 'POST',\n            body: JSON.stringify({\n                message,\n                sessionId: this.sessionId,\n            }),\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            ...this.fetchConfig,\n        };\n    }\n    // these will be called before sending logs\n    addHook(hook) {\n        if (typeof hook !== 'function') throw new Error('Invalid Hook');\n        this.hooks.push(hook);\n        return this;\n    }\n\n    runHooks() {\n        this.hooks.forEach(hook => hook(this.buffer.getBuffer(), this.sessionId));\n    }\n\n    flush() {\n        if (!this.sessionIdRequired || this.sessionId) {\n            const logs = this.buffer.getBuffer();\n            if (logs.length === 0) return Promise.resolve('No logs to send');\n            const config = this.getFetchConfig(logs);\n            this.runHooks();\n            this.buffer.flush();\n            if (this.__send__) return Promise.resolve(this.__send__(logs, this.sessionId));\n            return fetch(this.url, config);\n        }\n        return Promise.resolve('Required sessionId not set');\n    }\n}\n\nexport default Logger;\n"]}