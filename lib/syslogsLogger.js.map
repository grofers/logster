{"version":3,"sources":["../src/syslogsLogger.js"],"names":["sendLogs","getSyslogStream","level","name","facility","type","stream","createBunyanStream","local4","logger","message","sessionId","Array","isArray","indexOf","error","providedLevel","forEach","logLine","Error","syslogsLogger","streams","createLogger","req","res","next","body","sendStatus","e"],"mappings":";;;;;;;;QAagBA,Q,GAAAA,Q;;AAbhB;;;;AACA;;;;;;;;AAEA,IAAMC,kBAAkB,SAAlBA,eAAkB,CAACC,KAAD,EAAQC,IAAR,EAAcC,QAAd;AAAA,WAA4B;AAChDF,oBADgD;AAEhDG,cAAM,KAF0C;AAGhDC,gBAAQ,uBAAQC,kBAAR,CAA2B;AAC/BF,kBAAM,KADyB;AAE/BF,sBAF+B;AAG/BC,sBAAUA,YAAY,uBAAQI;AAHC,SAA3B;AAHwC,KAA5B;AAAA,CAAxB;;AAUO,SAASR,QAAT,OAA0CS,MAA1C,EAAkD;AAAA,QAA9BC,OAA8B,QAA9BA,OAA8B;AAAA,QAArBC,SAAqB,QAArBA,SAAqB;;AACrD,QAAI,CAACC,MAAMC,OAAN,CAAcH,OAAd,CAAD,IAA2B,QAAOA,OAAP,yCAAOA,OAAP,OAAmB,QAAlD,EAA4D;AACxD,YAAMR,QAAQQ,QAAQR,KAAR,IAAiB,OAA/B;;AAEA,YAAI,CAAC,MAAD,EAAS,OAAT,EAAkB,OAAlB,EAA2BY,OAA3B,CAAmCZ,KAAnC,MAA8C,CAAC,CAAnD,EAAsD;AAClDO,mBAAOP,KAAP,EAAc,EAAEQ,gBAAF,EAAWC,oBAAX,EAAd;AACH,SAFD,MAEO;AACHF,mBAAOM,KAAP,CAAa;AACTL,gCADS;AAETC,oCAFS;AAGTK,+BAAed,KAHN;AAITa,uBAAO;AAJE,aAAb;AAMH;AACJ,KAbD,MAaO,IAAIH,MAAMC,OAAN,CAAcH,OAAd,CAAJ,EAA4B;AAC/BA,gBAAQO,OAAR,CAAgB;AAAA,mBAAWjB,SAAS,EAAEU,SAASQ,OAAX,EAAoBP,oBAApB,EAAT,EAA0CF,MAA1C,CAAX;AAAA,SAAhB;AACH,KAFM,MAEA,MAAM,IAAIU,KAAJ,CAAU,iBAAV,CAAN;AACV;;AAED,IAAMC,gBAAgB,SAAhBA,aAAgB,CAClBjB,IADkB,EAKjB;AAAA,QAHDD,KAGC,uEAHO,OAGP;AAAA,QAFDE,QAEC;AAAA,QADDiB,OACC,uEADS,EACT;;AACD,QAAI,CAAClB,IAAL,EAAW;AACP,cAAM,IAAIgB,KAAJ,CAAU,kBAAV,CAAN;AACH;AACD,QAAMV,SAAS,iBAAOa,YAAP,CAAoB;AAC/BnB,kBAD+B;AAE/BkB,8CACOA,OADP,IAEIpB,gBAAgBC,KAAhB,EAAuBC,IAAvB,EAA6BC,QAA7B,CAFJ;AAF+B,KAApB,CAAf;;AAQA,WAAO,UAACmB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAAA,wBACQF,IAAIG,IADZ;AAAA,YACfhB,OADe,aACfA,OADe;AAAA,YACNC,SADM,aACNA,SADM;;AAEvB,YAAI,CAACD,OAAL,EAAc;AACVc,gBAAIG,UAAJ,CAAe,GAAf;AACA;AACH;AACD,YAAI;AACA3B,qBAAS,EAAEU,gBAAF,EAAWC,oBAAX,EAAT,EAAiCF,MAAjC;AACAe,gBAAIG,UAAJ,CAAe,GAAf;AACH,SAHD,CAGE,OAAOC,CAAP,EAAU;AACRH,iBAAKG,CAAL;AACH;AACJ,KAZD;AAaH,CA9BD;;kBAgCeR,a","file":"syslogsLogger.js","sourcesContent":["import bunyan from 'bunyan';\nimport bsyslog from 'bunyan-syslog';\n\nconst getSyslogStream = (level, name, facility) => ({\n    level,\n    type: 'raw',\n    stream: bsyslog.createBunyanStream({\n        type: 'sys',\n        name,\n        facility: facility || bsyslog.local4\n    })\n});\n\nexport function sendLogs({ message, sessionId }, logger) {\n    if (!Array.isArray(message) && typeof message === 'object') {\n        const level = message.level || 'debug';\n\n        if (['info', 'error', 'debug'].indexOf(level) !== -1) {\n            logger[level]({ message, sessionId });\n        } else {\n            logger.error({\n                message,\n                sessionId,\n                providedLevel: level,\n                error: 'invalid level',\n            });\n        }\n    } else if (Array.isArray(message)) {\n        message.forEach(logLine => sendLogs({ message: logLine, sessionId }, logger));\n    } else throw new Error('Invalid messgae');\n}\n\nconst syslogsLogger = (\n    name,\n    level = 'debug',\n    facility,\n    streams = [],\n) => {\n    if (!name) {\n        throw new Error('name is required');\n    }\n    const logger = bunyan.createLogger({\n        name,\n        streams: [\n            ...streams,\n            getSyslogStream(level, name, facility)\n        ],\n    });\n\n    return (req, res, next) => {\n        const { message, sessionId } = req.body;\n        if (!message) {\n            res.sendStatus(422);\n            return;\n        }\n        try {\n            sendLogs({ message, sessionId }, logger);\n            res.sendStatus(200);\n        } catch (e) {\n            next(e);\n        }\n    };\n};\n\nexport default syslogsLogger;\n"]}